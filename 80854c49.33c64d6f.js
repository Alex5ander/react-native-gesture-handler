(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{106:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return v}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=r.a.createContext({}),p=function(e){var t=r.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=p(n),u=a,v=l["".concat(c,".").concat(u)]||l[u]||b[u]||i;return n?r.a.createElement(v,o(o({ref:t},d),{},{components:n})):r.a.createElement(v,o({ref:t},d))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,c=new Array(i);c[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var d=2;d<i;d++)c[d]=n[d];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(6),i=(n(0),n(106)),c={id:"events",title:"Events",sidebar_label:"Events"},o={unversionedId:"api2/events",id:"api2/events",isDocsHomePage:!1,title:"Events",description:"There are two types of events in RNGH2: StateChangeEvent and GestureEvent. The StateChangeEvent is send every time a gesture moves to a different state, while GestureEvent is send every time a gesture is updated. Both carry a gesture-specific data and a state property, indicating the current state of the gesture. StateChangeEvent also carries a oldState property indicating the previous state of the gesture.",source:"@site/docs/api2/events.md",slug:"/api2/events",permalink:"/react-native-gesture-handler/docs/api2/events",editUrl:"https://github.com/software-mansion/react-native-gesture-handler/tree/master/docs/docs/api2/events.md",version:"current",sidebar_label:"Events",sidebar:"docs",previous:{title:"Gesture",permalink:"/react-native-gesture-handler/docs/api2/gesture"},next:{title:"GestureDetector",permalink:"/react-native-gesture-handler/docs/api2/gesture-detector"}},s=[{value:"Callbacks",id:"callbacks",children:[{value:"<code>onBegin(event)</code>",id:"onbeginevent",children:[]},{value:"<code>onStart(event)</code>",id:"onstartevent",children:[]},{value:"<code>onEnd(event, success)</code>",id:"onendevent-success",children:[]},{value:"<code>onUpdate(event)</code>",id:"onupdateevent",children:[]}]}],d={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"There are two types of events in RNGH2: ",Object(i.b)("inlineCode",{parentName:"p"},"StateChangeEvent")," and ",Object(i.b)("inlineCode",{parentName:"p"},"GestureEvent"),". The ",Object(i.b)("inlineCode",{parentName:"p"},"StateChangeEvent")," is send every time a gesture moves to a different state, while ",Object(i.b)("inlineCode",{parentName:"p"},"GestureEvent")," is send every time a gesture is updated. Both carry a gesture-specific data and a ",Object(i.b)("inlineCode",{parentName:"p"},"state")," property, indicating the current state of the gesture. ",Object(i.b)("inlineCode",{parentName:"p"},"StateChangeEvent")," also carries a ",Object(i.b)("inlineCode",{parentName:"p"},"oldState")," property indicating the previous state of the gesture."),Object(i.b)("h2",{id:"callbacks"},"Callbacks"),Object(i.b)("h3",{id:"onbeginevent"},Object(i.b)("inlineCode",{parentName:"h3"},"onBegin(event)")),Object(i.b)("p",null,"Is called when a gesture transitions to the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/react-native-gesture-handler/docs/state#began"}),Object(i.b)("inlineCode",{parentName:"a"},"BEGAN"))," state."),Object(i.b)("h3",{id:"onstartevent"},Object(i.b)("inlineCode",{parentName:"h3"},"onStart(event)")),Object(i.b)("p",null,"Is called when a gesture transitions to the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/react-native-gesture-handler/docs/state#active"}),Object(i.b)("inlineCode",{parentName:"a"},"ACTIVE"))," state."),Object(i.b)("h3",{id:"onendevent-success"},Object(i.b)("inlineCode",{parentName:"h3"},"onEnd(event, success)")),Object(i.b)("p",null,"Is called when a gesture transitions to the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/react-native-gesture-handler/docs/state#end"}),Object(i.b)("inlineCode",{parentName:"a"},"END")),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/react-native-gesture-handler/docs/state#failed"}),Object(i.b)("inlineCode",{parentName:"a"},"FAILED")),", or ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/react-native-gesture-handler/docs/state#cancelled"}),Object(i.b)("inlineCode",{parentName:"a"},"CANCELLED"))," state. If the gesture transitions to the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/react-native-gesture-handler/docs/state#end"}),Object(i.b)("inlineCode",{parentName:"a"},"END"))," state, the ",Object(i.b)("inlineCode",{parentName:"p"},"success")," argument is set to ",Object(i.b)("inlineCode",{parentName:"p"},"true")," otherwise it is set to ",Object(i.b)("inlineCode",{parentName:"p"},"false"),"."),Object(i.b)("h3",{id:"onupdateevent"},Object(i.b)("inlineCode",{parentName:"h3"},"onUpdate(event)")),Object(i.b)("p",null,"Is called every time a gesture is updated while it is in the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/react-native-gesture-handler/docs/state#active"}),Object(i.b)("inlineCode",{parentName:"a"},"ACTIVE"))," state."))}p.isMDXComponent=!0}}]);